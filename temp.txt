// ========================================================================================================================================
// Real-time fire data fetching and processing
// ========================================================================================================================================

const calculatePolygonCenter = (coordinates, geomType) => {
  let allCoords = [];
  
  if (geomType === "Polygon") {
    allCoords = coordinates[0]; // outer ring
  } else if (geomType === "MultiPolygon") {
    for (let polygon of coordinates) {
      allCoords = allCoords.concat(polygon[0]); // outer ring of each polygon
    }
  }
  
  if (allCoords.length === 0) return null;
  
  // Simple centroid calculation
  const lngSum = allCoords.reduce((sum, coord) => sum + coord[0], 0);
  const latSum = allCoords.reduce((sum, coord) => sum + coord[1], 0);
  
  return {
    lng: lngSum / allCoords.length,
    lat: latSum / allCoords.length
  };
};

const getSeverityFromSize = (acres) => {
  if (acres >= 50000) return "High";
  if (acres >= 10000) return "Medium";
  return "Low";
};

const formatEpochToDateTime = (epochMs) => {
  if (!epochMs) return null;
  const date = new Date(epochMs);
  return date.toISOString();
};

const fetchRealTimeFireData = async () => {
  const apiUrl = "https://rdipowerplatformfd-e5hhgqaahef7fbdr.a02.azurefd.net/incidents/perimeters-gj.json";
  
  try {
    console.log("Fetching real-time fire data...");
    const response = await fetch(apiUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.type !== 'FeatureCollection') {
      throw new Error('Expected FeatureCollection format');
    }
    
    console.log(`Processing ${data.features.length} fire features...`);
    
    const processedFires = data.features.map((feature, index) => {
      const { geometry, properties } = feature;
      
      // Calculate center point
      const center = calculatePolygonCenter(geometry.coordinates, geometry.type);
      if (!center) {
        console.warn(`Skipping feature ${index + 1}: No valid coordinates`);
        return null;
      }
      
      // Extract properties
      const name = properties.incident_name || properties.id || `Fire_${index + 1}`;
      const size = properties.area_acres || 0;
      const severity = getSeverityFromSize(size);
      const lastUpdate = formatEpochToDateTime(properties.poly_DateCurrent);
      
      return {
        id: properties.id || index + 1,
        name: name,
        lat: center.lat,
        lng: center.lng,
        size: size,
        containment: null,
        severity: severity,
        lastUpdate: lastUpdate,
        weather: null, // Will be implemented later
        geometry: geometry // Store the geometry for polygon rendering
      };
    }).filter(fire => fire !== null); // Remove any null entries
    
    console.log(`Successfully processed ${processedFires.length} fires`);
    return processedFires;
    
  } catch (error) {
    console.error('Error fetching real-time fire data:', error);
    throw error;
  }
};