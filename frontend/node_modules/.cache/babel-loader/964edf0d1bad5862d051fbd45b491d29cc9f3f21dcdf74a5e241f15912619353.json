{"ast":null,"code":"// In your App.js, update the fetchFires function:\n\nuseEffect(() => {\n  const fetchFires = async () => {\n    try {\n      setDataLoading(true);\n      setError(null);\n\n      // Add realWeather=true parameter to use real weather data\n      const response = await fetch('http://localhost:3001/api/fires?realWeather=true');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const firesData = await response.json();\n      setFires(firesData);\n      console.log('Fetched fires with real weather:', firesData);\n    } catch (error) {\n      console.error('Error fetching fires:', error);\n      setError('Failed to load fire data. Make sure your backend server is running on port 3001.');\n    } finally {\n      setDataLoading(false);\n    }\n  };\n  fetchFires();\n}, []);\n\n// Also update the refreshData function:\n\nconst refreshData = async () => {\n  setDataLoading(true);\n  setError(null);\n  try {\n    // Add realWeather=true parameter here too\n    const response = await fetch('http://localhost:3001/api/fires?realWeather=true');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const firesData = await response.json();\n    setFires(firesData);\n\n    // Close prediction panel if it's open\n    setShowPrediction(false);\n    setSelectedFire(null);\n    setPrediction(null);\n  } catch (error) {\n    console.error('Error refreshing data:', error);\n    setError('Failed to refresh data. Please try again.');\n  } finally {\n    setDataLoading(false);\n  }\n};","map":{"version":3,"names":["useEffect","fetchFires","setDataLoading","setError","response","fetch","ok","Error","status","firesData","json","setFires","console","log","error","refreshData","setShowPrediction","setSelectedFire","setPrediction"],"sources":["/Users/timothyha/firecast/frontend/src/App.js"],"sourcesContent":["// In your App.js, update the fetchFires function:\n\nuseEffect(() => {\n  const fetchFires = async () => {\n    try {\n      setDataLoading(true);\n      setError(null);\n      \n      // Add realWeather=true parameter to use real weather data\n      const response = await fetch('http://localhost:3001/api/fires?realWeather=true');\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const firesData = await response.json();\n      setFires(firesData);\n      console.log('Fetched fires with real weather:', firesData);\n    } catch (error) {\n      console.error('Error fetching fires:', error);\n      setError('Failed to load fire data. Make sure your backend server is running on port 3001.');\n    } finally {\n      setDataLoading(false);\n    }\n  };\n  \n  fetchFires();\n}, []);\n\n// Also update the refreshData function:\n\nconst refreshData = async () => {\n  setDataLoading(true);\n  setError(null);\n  \n  try {\n    // Add realWeather=true parameter here too\n    const response = await fetch('http://localhost:3001/api/fires?realWeather=true');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const firesData = await response.json();\n    setFires(firesData);\n    \n    // Close prediction panel if it's open\n    setShowPrediction(false);\n    setSelectedFire(null);\n    setPrediction(null);\n  } catch (error) {\n    console.error('Error refreshing data:', error);\n    setError('Failed to refresh data. Please try again.');\n  } finally {\n    setDataLoading(false);\n  }\n};"],"mappings":"AAAA;;AAEAA,SAAS,CAAC,MAAM;EACd,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACFC,cAAc,CAAC,IAAI,CAAC;MACpBC,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,CAAC;MAEhF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvCC,QAAQ,CAACF,SAAS,CAAC;MACnBG,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEJ,SAAS,CAAC;IAC5D,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CX,QAAQ,CAAC,kFAAkF,CAAC;IAC9F,CAAC,SAAS;MACRD,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAEDD,UAAU,CAAC,CAAC;AACd,CAAC,EAAE,EAAE,CAAC;;AAEN;;AAEA,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9Bb,cAAc,CAAC,IAAI,CAAC;EACpBC,QAAQ,CAAC,IAAI,CAAC;EAEd,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,CAAC;IAChF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACvCC,QAAQ,CAACF,SAAS,CAAC;;IAEnB;IACAO,iBAAiB,CAAC,KAAK,CAAC;IACxBC,eAAe,CAAC,IAAI,CAAC;IACrBC,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CX,QAAQ,CAAC,2CAA2C,CAAC;EACvD,CAAC,SAAS;IACRD,cAAc,CAAC,KAAK,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}